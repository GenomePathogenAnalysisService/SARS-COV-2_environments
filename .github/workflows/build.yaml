name: Build SARS-COVID images

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-aln2type-docker:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set release version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      -
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: aln2type
          tags: oxfordmmm/aln2type:latest, oxfordmmm/aln2type:${{env.RELEASE_VERSION}}
          push: true
          no-cache: true
      -
        name: Docker digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  build-aln2type-sing:
    runs-on: ubuntu-latest
    needs: build-aln2type-docker
    strategy:
      matrix:
        singularity_version:
          - '3.7.0'
    container:
      image: quay.io/singularity/singularity:v${{ matrix.singularity_version }}
      options: --privileged
    steps:
      - uses: actions/checkout@v2
      - name: Set release version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - 
        name: build singularity
        run: singularity build aln2type_${{env.RELEASE_VERSION}}.sif docker://oxfordmmm/aln2type:${{env.RELEASE_VERSION}}
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: aln2type_*.sif
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload image for OCI push
        uses: actions/upload-artifact@v2
        with:
          name: aln2type
          path: aln2type_*.sif

  build-nextclade-sing:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        singularity_version:
          - '3.7.0'
    container:
      image: quay.io/singularity/singularity:v${{ matrix.singularity_version }}
      options: --privileged
    steps:
      - uses: actions/checkout@v2
      - name: Set release version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - 
        name: build singularity
        run: singularity build nextclade_${{env.RELEASE_VERSION}}.sif docker://nextstrain/nextclade:latest
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: nextclade_*.sif
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload image for OCI push
        uses: actions/upload-artifact@v2
        with:
          name: nextclade
          path: nextclade_*.sif

  build-oci-docker:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set release version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      -
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: OCI_object_HRR
          tags: oxfordmmm/oci_pipeline:latest, oxfordmmm/oci_pipeline:${{env.RELEASE_VERSION}}
          push: true
          no-cache: true
      -
        name: Docker digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  build-oci-sing:
    runs-on: ubuntu-latest
    needs: build-oci-docker
    strategy:
      matrix:
        singularity_version:
          - '3.7.0'
    container:
      image: quay.io/singularity/singularity:v${{ matrix.singularity_version }}
      options: --privileged
    steps:
      - uses: actions/checkout@v2
      - name: Set release version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - 
        name: build singularity
        run: singularity build oci_pipeline_${{env.RELEASE_VERSION}}.sif docker://oxfordmmm/oci_pipeline:${{env.RELEASE_VERSION}}
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: oci_pipeline_*.sif
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload image for OCI push
        uses: actions/upload-artifact@v2
        with:
          name: oci_pipeline
          path: oci_pipeline_*.sif
  
  build-pango-docker:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set release version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      -
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: pango
          tags: oxfordmmm/pango:latest, oxfordmmm/pango:${{env.RELEASE_VERSION}}
          push: true
          no-cache: true
      -
        name: Docker digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  build-pango-sing:
    runs-on: ubuntu-latest
    needs: build-pango-docker
    strategy:
      matrix:
        singularity_version:
          - '3.7.0'
    container:
      image: quay.io/singularity/singularity:v${{ matrix.singularity_version }}
      options: --privileged
    steps:
      - uses: actions/checkout@v2
      - name: Set release version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - 
        name: build singularity
        run: singularity build pango_${{env.RELEASE_VERSION}}.sif docker://oxfordmmm/pango:${{env.RELEASE_VERSION}}
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: pango_*.sif
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload image for OCI push
        uses: actions/upload-artifact@v2
        with:
          name: pango
          path: pango_*.sif
  
  build-fn4-docker:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set release version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      -
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: FN4upload
          tags: oxfordmmm/fn4_upload:latest, oxfordmmm/fn4_upload:${{env.RELEASE_VERSION}}
          push: true
          no-cache: true
      -
        name: Docker digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  build-fn4-sing:
    runs-on: ubuntu-latest
    needs: build-fn4-docker
    strategy:
      matrix:
        singularity_version:
          - '3.7.0'
    container:
      image: quay.io/singularity/singularity:v${{ matrix.singularity_version }}
      options: --privileged
    steps:
      - uses: actions/checkout@v2
      - name: Set release version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - 
        name: build singularity
        run: singularity build fn4_upload_${{env.RELEASE_VERSION}}.sif docker://oxfordmmm/fn4_upload:${{env.RELEASE_VERSION}}
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: fn4_upload_*.sif
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload image for OCI push
        uses: actions/upload-artifact@v2
        with:
          name: fn4_upload
          path: fn4_upload_*.sif

  get_versions:
    runs-on: ubuntu-latest
    needs: [build-aln2type-sing, build-nextclade-sing, build-oci-sing, build-pango-sing, build-fn4-sing]
    strategy:
      matrix:
        singularity_version:
          - '3.7.0'
    container:
      image: quay.io/singularity/singularity:v${{ matrix.singularity_version }}
      options: --privileged
    steps:
      - uses: actions/checkout@v2
      - name: Set release version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: "Setup"
        run: apk add curl

      - name: Gather nextclade singularity image
        uses: actions/download-artifact@v2
        with:
          path: sing_images
          name: nextclade

      - name: Gather pango singularity image
        id: download
        uses: actions/download-artifact@v2
        with:
          path: sing_images
          name: pango
      
      - name: 'Get latest viridian image'
        run: |
          VIRIDIAN_VERSION=$(curl -s -L -I -o /dev/null -w '%{url_effective}' https://github.com/iqbal-lab-org/viridian_workflow/releases/latest | xargs basename)
          wget https://github.com/iqbal-lab-org/viridian_workflow/releases/latest/download/viridian_workflow_${VIRIDIAN_VERSION}.img
          mv viridian_workflow_v*.img ${{steps.download.outputs.download-path}}/
          echo "VIRIDIAN_VERSION=$(curl -s -L -I -o /dev/null -w '%{url_effective}' https://github.com/iqbal-lab-org/viridian_workflow/releases/latest | xargs basename)" >> $GITHUB_ENV

      - name: 'Get latest ncov2019-artic-nf images'
        run: |
          ARTIC_VERSION=$(curl -s -L -I -o /dev/null -w '%{url_effective}' https://github.com/oxfordmmm/ncov2019-artic-nf/releases/latest | xargs basename)
          echo "ARTIC_VERSION=$(curl -s -L -I -o /dev/null -w '%{url_effective}' https://github.com/oxfordmmm/ncov2019-artic-nf/releases/latest | xargs basename)" >> $GITHUB_ENV
      
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.SP3_GITHUB_TOKEN }}
          repository: oxfordmmm/ncov2019-artic-nf
          path: ncov2019-artic-nf
          ref: ${{ env.ARTIC_VERSION }}
          fetch-depth: 0
      
      - name: "Get versions"
        working-directory: ncov2019-artic-nf
        run: |
          echo "viridian $(singularity exec ${{steps.download.outputs.download-path}}/viridian_workflow_${VIRIDIAN_VERSION}.img viridian_workflow --version)" >> versions.txt
          echo "nextclade $(singularity exec ${{steps.download.outputs.download-path}}/nextclade_${RELEASE_VERSION}.sif nextclade -v)" >> versions.txt
          echo "$(singularity exec ${{steps.download.outputs.download-path}}/pango_${RELEASE_VERSION}.sif pangolin -v)" >> versions.txt

      - name: 'Update ncov2019 nextflow config and versions'
        working-directory: ncov2019-artic-nf
        run: |
          git checkout -b temp-sp3env
          sed -i "s/artic-ncov2019-illumina_v*.*.*.sif/artic-ncov2019-illumina_${ARTIC_VERSION}.sif/g" nextflow.config
          sed -i "s/artic-ncov2019-nanopore_v*.*.*.sif/artic-ncov2019-nanopore_${ARTIC_VERSION}.sif/g" nextflow.config
          sed -i "s/viridian_workflow_v*.*.*.img/viridian_workflow_${VIRIDIAN_VERSION}.img/g" nextflow.config
          sed -i "s/oci_pipeline_v*.*.*.sif/oci_pipeline_${RELEASE_VERSION}.sif/g" nextflow.config
          sed -i "s/pango_v*.*.*.sif/pango_${RELEASE_VERSION}.sif/g" nextflow.config
          sed -i "s/nextclade_v*.*.*.sif/nextclade_${RELEASE_VERSION}.sif/g" nextflow.config
          sed -i "s/aln2type_v*.*.*.sif/aln2type_${RELEASE_VERSION}.sif/g" nextflow.config
          sed -i "s/fn4_upload_v*.*.*.sif/fn4_upload_${RELEASE_VERSION}.sif/g" nextflow.config
          sed -i "s/version = '*.*.*'/version = 'sp3env-${RELEASE_VERSION}'/g" nextflow.config
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add nextflow.config versions.txt
          git commit -m "config and version file for sp3 environment ${RELEASE_VERSION}"
          git tag sp3env-${RELEASE_VERSION}
          git push --set-upstream origin temp-sp3env 
          git push --tags
          git checkout master
          git push origin --delete temp-sp3env

  push_images_to_oci:
    runs-on: ubuntu-latest
    needs: [get_versions]
    steps:
      - uses: actions/checkout@v2
      - name: Set release version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: 'Write Config & Key Files'
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
          echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
          echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
          echo "key_file=~/.oci/key.pem" >> ~/.oci/config
          echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/key.pem

      - name: 'Install OCI CLI'
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "~/bin" >> $GITHUB_PATH
          source ~/.bashrc

      - name: 'Fix OCI Config File Permissions'
        run: |
          oci setup repair-file-permissions --file ~/.oci/config
          oci setup repair-file-permissions --file ~/.oci/key.pem

      - name: Gather aln2type singularity image
        uses: actions/download-artifact@v2
        with:
          path: sing_images
          name: aln2type

      - name: Gather nextclade singularity image
        uses: actions/download-artifact@v2
        with:
          path: sing_images
          name: nextclade

      - name: Gather oci_pipeline singularity image
        uses: actions/download-artifact@v2
        with:
          path: sing_images
          name: oci_pipeline

      - name: Gather pango singularity image
        uses: actions/download-artifact@v2
        with:
          path: sing_images
          name: pango

      - name: Gather fn4_upload singularity image
        uses: actions/download-artifact@v2
        with:
          path: sing_images
          name: fn4_upload
      
      - name: 'Get latest viridian image'
        run: |
          VIRIDIAN_VERSION=$(curl -s -L -I -o /dev/null -w '%{url_effective}' https://github.com/iqbal-lab-org/viridian_workflow/releases/latest | xargs basename)
          wget https://github.com/iqbal-lab-org/viridian_workflow/releases/latest/download/viridian_workflow_${VIRIDIAN_VERSION}.img
          mv viridian_workflow_v*.img sing_images/
          echo "VIRIDIAN_VERSION=$(curl -s -L -I -o /dev/null -w '%{url_effective}' https://github.com/iqbal-lab-org/viridian_workflow/releases/latest | xargs basename)" >> $GITHUB_ENV

      - name: 'Get latest ncov2019-artic-nf images'
        run: |
          ARTIC_VERSION=$(curl -s -L -I -o /dev/null -w '%{url_effective}' https://github.com/oxfordmmm/ncov2019-artic-nf/releases/latest | xargs basename)
          wget https://github.com/oxfordmmm/ncov2019-artic-nf/releases/latest/download/artic-ncov2019-illumina_${ARTIC_VERSION}.sif
          wget https://github.com/oxfordmmm/ncov2019-artic-nf/releases/latest/download/artic-ncov2019-nanopore_${ARTIC_VERSION}.sif
          mv artic-ncov2019-*.sif sing_images/
          echo "ARTIC_VERSION=$(curl -s -L -I -o /dev/null -w '%{url_effective}' https://github.com/oxfordmmm/ncov2019-artic-nf/releases/latest | xargs basename)" >> $GITHUB_ENV

      - name: 'Upload to OCI'
        run: oci os object bulk-upload -bn artic_images --src-dir sing_images --object-prefix "${{env.RELEASE_VERSION}}/"

      - uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            aln2type
            nextclade
            oci_pipeline
            pango
            fn4_upload
          failOnError: false